// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())  
  email         String  @unique  
  passwordHash  String  
  name          String  
  role          Role    @default(BUYER) 
  shop          Shop[]
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Shop {
  id            String  @id @default(uuid())  
  user          User    @relation(fields: [userId], references: [id])
  userId        String    
  shopName      String  @unique 
  description   String?
  isActive      Boolean @default(true)  
  products      Product[]
  orders        Order[]
  logoPicture   String?
  bannerPicture String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id          String  @id @default(uuid())  
  shop        Shop    @relation(fields: [shopId], references: [id])
  shopId      String  
  name        String  
  price       Float  
  stock       Int  
  imageUrl    String?
  isActive    Boolean @default(true)
  orderItems  OrderItem[]
  reviews     Review[]  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String  @id @default(uuid())  
  user        User    @relation(fields: [userId], references: [id])
  userId      String  
  shop        Shop    @relation(fields: [shopId], references: [id])
  shopId      String  
  orderItems  OrderItem[]
  status      OrderStatus @default(PENDING)
  totalPrice  Float  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id         String  @id @default(uuid())  
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    String  
  product    Product @relation(fields: [productId], references: [id])
  productId  String  
  quantity   Int  
  price      Float  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id         String  @id @default(uuid())  
  user       User    @relation(fields: [userId], references: [id])
  userId     String  
  product    Product @relation(fields: [productId], references: [id])
  productId  String  
  rating     Int     @default(5)
  comment    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED   
}